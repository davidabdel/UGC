"use client";

import Link from "next/link";
import { useState, useEffect } from "react";
import UpscaleDialog from "@/components/UpscaleDialog";

export default function ProjectDetailsPage({ params }: { params: { id: string } }) {
  const id = params.id;
  const [project, setProject] = useState<any>(null);
  const [showUpscaleDialog, setShowUpscaleDialog] = useState(false);
  const [activeImageUrl, setActiveImageUrl] = useState<string | null>(null);
  const [activeImageType, setActiveImageType] = useState<string>("");

  useEffect(() => {
    // Load project data from localStorage
    try {
      const raw = localStorage.getItem("ugc_projects");
      if (raw) {
        const projects = JSON.parse(raw);
        const found = projects.find((p: any) => p.id === id);
        if (found) {
          setProject(found);
        }
      }
    } catch (error) {
      console.error("Error loading project:", error);
    }
  }, [id]);

  const handleUpscale = (imageUrl: string, type: string) => {
    setActiveImageUrl(imageUrl);
    setActiveImageType(type);
    setShowUpscaleDialog(true);
  };

  const handleUpscaleComplete = (newImageUrl: string) => {
    if (activeImageType && project) {
      // Update the project with the new image URL based on the type
      const updatedProject = { ...project };
      
      if (activeImageType === "product") {
        updatedProject.productImageUrl = newImageUrl;
      } else if (activeImageType === "persona") {
        updatedProject.personaImageUrl = newImageUrl;
      } else if (activeImageType === "generated") {
        updatedProject.videoUrl = newImageUrl;
      }
      
      setProject(updatedProject);
      
      // Update in localStorage
      try {
        const raw = localStorage.getItem("ugc_projects");
        if (raw) {
          const projects = JSON.parse(raw);
          const updatedProjects = projects.map((p: any) => 
            p.id === id ? updatedProject : p
          );
          localStorage.setItem("ugc_projects", JSON.stringify(updatedProjects));
        }
      } catch (error) {
        console.error("Error updating project:", error);
      }
    }
  };

  // Mock data for the UI
  const productImageUrl = project?.productImageUrl || "";
  const personaImageUrl = project?.personaImageUrl || "";
  const generatedImageUrl = project?.videoUrl || "";

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="glass-card !p-6">
        <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
          <div>
            <h1 className="text-2xl font-bold">{project?.title || `Project #${id}`}</h1>
            <div className="text-xs text-white/60">Status: {project?.status || "Draft"} • Created today • Updated just now</div>
          </div>
          <div className="flex gap-2">
            <button className="btn-ghost">Duplicate</button>
            <button className="btn-ghost">Delete</button>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="glass-card !p-0">
        <div className="flex gap-2 border-b border-white/10 px-4 py-2 text-sm">
          <button className="rounded-xl bg-white/10 px-3 py-1">Assets</button>
          <button className="rounded-xl px-3 py-1 hover:bg-white/5">Renders</button>
          <button className="rounded-xl px-3 py-1 hover:bg-white/5">Notes</button>
        </div>
        <div className="p-4">
          <div className="grid gap-4 md:grid-cols-3">
            <div className="rounded-xl border border-white/10 bg-white/5 p-4">
              <div className="text-sm font-semibold">Product image</div>
              <div className="mt-2 aspect-video w-full rounded-lg bg-white/5">
                {productImageUrl && (
                  // eslint-disable-next-line @next/next/no-img-element
                  <img src={productImageUrl} alt="Product" className="h-full w-full object-cover" />
                )}
              </div>
              <div className="mt-2 flex gap-2 text-sm">
                {productImageUrl && (
                  <button className="btn-ghost" onClick={() => handleUpscale(productImageUrl, "product")}>
                    Upscale
                  </button>
                )}
                <button className="btn-ghost">Download</button>
                <button className="btn-ghost">Replace</button>
              </div>
            </div>
            <div className="rounded-xl border border-white/10 bg-white/5 p-4">
              <div className="text-sm font-semibold">Persona image</div>
              <div className="mt-2 aspect-video w-full rounded-lg bg-white/5">
                {personaImageUrl && (
                  // eslint-disable-next-line @next/next/no-img-element
                  <img src={personaImageUrl} alt="Persona" className="h-full w-full object-cover" />
                )}
              </div>
              <div className="mt-2 flex gap-2 text-sm">
                {personaImageUrl && (
                  <button className="btn-ghost" onClick={() => handleUpscale(personaImageUrl, "persona")}>
                    Upscale
                  </button>
                )}
                <button className="btn-ghost">Download</button>
                <button className="btn-ghost">Replace</button>
              </div>
            </div>
            <div className="rounded-xl border border-white/10 bg-white/5 p-4">
              <div className="text-sm font-semibold">Generated image</div>
              <div className="mt-2 aspect-video w-full rounded-lg bg-white/5">
                {generatedImageUrl && project?.type === "image" && (
                  // eslint-disable-next-line @next/next/no-img-element
                  <img src={generatedImageUrl} alt="Generated" className="h-full w-full object-cover" />
                )}
                {generatedImageUrl && project?.type === "video" && (
                  // eslint-disable-next-line jsx-a11y/media-has-caption
                  <video src={generatedImageUrl} className="h-full w-full object-cover" />
                )}
              </div>
              <div className="mt-2 flex gap-2 text-sm">
                {generatedImageUrl && project?.type === "image" && (
                  <button className="btn-ghost" onClick={() => handleUpscale(generatedImageUrl, "generated")}>
                    Upscale
                  </button>
                )}
                <button className="btn-ghost">Download</button>
                <button className="btn-ghost">Replace</button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="text-sm text-white/70">
        <Link href="/app/projects" className="hover:underline">Back to projects</Link>
      </div>

      {/* Upscale Dialog */}
      {showUpscaleDialog && activeImageUrl && (
        <UpscaleDialog
          imageUrl={activeImageUrl}
          onUpscaleComplete={handleUpscaleComplete}
          open={showUpscaleDialog}
          onOpenChange={setShowUpscaleDialog}
        />
      )}
    </div>
  );
}
